{
  "Comment": "A description of my state machine",
  "StartAt": "Log object",
  "States": {
    "Log object": {
      "Type": "Pass",
      "Next": "Backup",
      "Comment": "Log the object we are processing"
    },
    "Backup": {
      "Type": "Task",
      "Arguments": {
        "Body": "{% $states.input %}",
        "Bucket": "open-forms-main-stack-submissionforwardersubmissio-om51lonqnmo8",
        "Key": "{% $states.input.reference %}"
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:putObject",
      "Next": "Forward to ESB?",
      "Output": "{% $states.input %}"
    },
    "Has notification email?": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Notification email",
          "Condition": "{% ($exists($states.context.Execution.Input.internalNotificationEmails) and $exists($states.context.Execution.Input.internalNotificationEmails[0])) %}",
          "Comment": "internalNotificationEmail(s) provided"
        }
      ],
      "Default": "Success"
    },
    "Notification email": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "arn:aws:lambda:eu-central-1:043309345347:function:open-forms-main-stack-submissionforwarderinternaln-9u2jeGvmIdjB",
        "Payload": "{% $states.context.Execution.Input %}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Success"
    },
    "Forward to ESB?": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "ESB Forwarder",
          "Condition": "{% ($exists($states.input.networkShare) or $exists($states.input.monitoringNetworkShare)) %}",
          "Comment": "networkShare or monitoring provided"
        }
      ],
      "Default": "ZGW registration?"
    },
    "ESB Forwarder": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.input %}",
      "Arguments": {
        "FunctionName": "arn:aws:lambda:eu-central-1:043309345347:function:open-forms-main-stack-submissionforwarderF7BA6E68-VAYsi1POqsNN",
        "Payload": "{% $states.input %}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "ZGW registration?"
    },
    "ZGW registration?": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Register ZGW",
          "Condition": "{% ($exists($states.input.bsn) or $exists($states.input.kvk)) %}",
          "Comment": "Has bsn or kvk"
        }
      ],
      "Default": "Has notification email?"
    },
    "Register ZGW": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "arn:aws:lambda:eu-central-1:043309345347:function:open-forms-main-stack-submissionforwarderzgwfuncti-GX5fBs5ID5u9",
        "Payload": "{% $states.input %}"
      },
      "Next": "Has notification email?",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Comment": "ZGW Error catcher",
          "Next": "Has notification email?",
          "Output": "{% $states.input %}"
        }
      ]
    },
    "Success": {
      "Type": "Succeed"
    }
  },
  "QueryLanguage": "JSONata"
}